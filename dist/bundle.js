(()=>{"use strict";eval('\n;// CONCATENATED MODULE: ./model/answerDetails.js\nclass AnswerDetails {\n    constructor(answerTime, isAnswered, answer, score) {\n        this.answerTime = answerTime;\n        this.isAnswered = isAnswered;\n        this.answer = answer;\n        this.score = score;\n    }\n}\n;// CONCATENATED MODULE: ./service/questionsFetcher.js\nclass QuestionsFetcher {\n    async fetchQuestions(questionsNum, category, difficulty) {\n        const apiURL = `https://opentdb.com/api.php?amount=${questionsNum}&category=${category}&difficulty=${difficulty}&type=multiple`;\n        return fetch(apiURL)\n            .then(response => response.json()) \n            .then(data=>{\n                return data.results;\n            });\n    }\n}\n;// CONCATENATED MODULE: ./model/question.js\nclass Question {\n    constructor(responseObj) {\n        this.category = responseObj.category;\n        this.type = responseObj.type;\n        this.difficulty = responseObj.difficulty;\n        this.question = responseObj.question;\n        this.correctAnswer = responseObj.correct_answer;\n        this.incorrectAnswers = responseObj.incorrect_answers;\n        this.answerDetails = {};\n    }\n\n    setAnswerDetails(answerDetails) {\n        this.answerDetails = answerDetails;\n    }\n}\n;// CONCATENATED MODULE: ./service/categoriesFetcher.js\nclass CategoriesFetcher {\n    async fetchCategories() {\n        const apiURL = "https://opentdb.com/api_category.php";\n        return fetch(apiURL)\n            .then(response => response.json()) \n            .then(data=>{\n                return data.trivia_categories;\n            });\n    }\n}\n;// CONCATENATED MODULE: ./ui/userInterface.js\n\n\nconst categories = document.getElementById("category");\nconst questionsNum = document.getElementById("quantity");\nconst properties = document.getElementById("properties");\nconst progressBar = document.getElementById("progressBar");\nconst questions = document.getElementById("questions");\nconst questionDiv = document.getElementById("question");\nconst questionForm = document.forms["questionForm"];\n\nclass UserInterface {\n    constructor() {\n        this.categoriesFetcher = new CategoriesFetcher();\n    }\n\n    async populateCategories() {\n        await this.categoriesFetcher.fetchCategories()\n            .then(response => {response.forEach(obj => {\n                let option = document.createElement("option");\n                option.text = obj.name;\n                option.value = obj.id;\n                categories.add(option);\n            });\n        });\n    }\n\n    async populateQuestionNums() {\n        for(let i=5; i<26; i++) {\n            let option = document.createElement("option");\n            option.text = i;\n            option.value = i;\n            questionsNum.add(option);\n        }\n    }\n\n    async prepareQuestionScreen() {\n        properties.classList.add("hide");\n        progressBar.classList.remove("hide");\n        questions.classList.remove("hide");\n    }\n\n    async showQuestion(question, questionNum, currentQuestionNum) {\n        questionDiv.innerHTML = question.question;\n        let allAnswers = this.getAllAnswers(question);\n        questionForm.innerHTML = "";\n        this.createAnswers(allAnswers);\n        this.increseProgressBar(questionNum, currentQuestionNum)\n    }\n\n    increseProgressBar(questionNum, currentQuestionNum) {\n        console.log(questionNum + " " + currentQuestionNum);\n        const progressValue = document.getElementById("progressValue");\n        const calculatedWidth = (currentQuestionNum / questionNum) * 100;\n        const widthValue = calculatedWidth + "%";\n        console.log(widthValue);\n        progressValue.style.width = widthValue;\n    }\n\n    shuffleArray(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n\n    createRadioBox(answer) {\n        let radiobox = document.createElement(\'input\');\n        radiobox.type = \'radio\';\n        radiobox.value = answer;\n        radiobox.name = "answer"\n        return radiobox;\n    }\n\n    createLabel(answer) {\n        let label = document.createElement(\'label\')\n        label.htmlFor = \'answer\';\n        let description = document.createTextNode(answer);\n        label.appendChild(description);\n        return label;\n    }\n\n    createAnswerGroup(radiobox, label) {\n        let answerGroup = document.createElement("div");\n        answerGroup.classList.add("answerGroup");\n        \n        answerGroup.appendChild(radiobox);\n        answerGroup.appendChild(label);\n        return answerGroup;\n    }\n\n    getAllAnswers(question) {\n        let allAnswers = question.incorrectAnswers;\n        allAnswers.push(question.correctAnswer);\n        this.shuffleArray(allAnswers);\n        return allAnswers;\n    }\n\n    createAnswers(allAnswers) {\n        allAnswers.forEach(answer => {\n            let radiobox = this.createRadioBox(answer);\n            let label = this.createLabel(answer);\n            let answerGroup = this.createAnswerGroup(radiobox, label);\n            questionForm.appendChild(answerGroup);\n        });\n    }\n\n    getSelectedRadioValue() {\n        let selectedAnswer;\n        questionForm["answer"].forEach(answer => {\n            if(answer.checked) selectedAnswer = answer.value;\n        });\n        return selectedAnswer;\n    }\n}\n;// CONCATENATED MODULE: ./game/timer.js\nclass Timer {\n    constructor() {\n        this.start = new Date();\n    }\n\n    getMilisecondsFromStart() {\n        let stop = new Date();\n        return stop.getTime() - this.start.getTime();\n    }\n}\n;// CONCATENATED MODULE: ./game/game.js\n\n\n\n\n\n\nconst game_categories = document.getElementById("category");\nconst game_questionsNum = document.getElementById("quantity");\nconst game_properties = document.getElementById("properties");\nconst playButton = document.getElementById("playButton");\nconst game_questions = document.getElementById("questions");\nconst game_progressBar = document.getElementById("progressBar");\nconst timerDiv = document.getElementById("timer");\nconst propertiesForm = document.forms["propertiesForm"];\nconst bonusTime = 5000;\n\nclass Game {\n    constructor() {\n        this.questions = [];\n        this.currentQuestionNum = -1;\n        this.userInterface = new UserInterface();\n        this.questionFetcher = new QuestionsFetcher();\n        this.questionTimer = {};\n    }\n\n    async startGame() {\n        this.userInterface.populateCategories();\n        this.userInterface.populateQuestionNums();\n    }\n        \n    async submitProperties() {\n        const questionsNum = propertiesForm["quantity"].value;\n        const category = propertiesForm["category"].value;\n        const difficulty = propertiesForm["difficulty"].value;\n        await this.saveQuestions(questionsNum, category, difficulty);\n        this.userInterface.prepareQuestionScreen();\n        this.loadNextQuestion();\n    }\n\n    async saveQuestions(questionsNum, category, difficulty) {\n        await this.questionFetcher.fetchQuestions(questionsNum, category, difficulty)\n            .then(response => {\n                response.forEach(obj => {\n                    this.questions.push(new Question(obj));\n            });\n        });\n    }\n\n    loadNextQuestion() {\n        if(this.currentQuestionNum < this.questions.length) {\n            this.currentQuestionNum ++;\n            this.userInterface.showQuestion(this.questions[this.currentQuestionNum], this.questions.length, this.currentQuestionNum);\n            this.startTimer();\n        }\n    }\n\n    startTimer() {\n        this.questionTimer = new Timer();\n        return timer;\n    }\n\n    answer() {\n        const answer = this.userInterface.getSelectedRadioValue();\n        const time = this.questionTimer.getMilisecondsFromStart();\n        const correctAnswer = this.questions[this.currentQuestionNum].correctAnswer;\n        const score = this.calculateScore(answer, correctAnswer, time);\n        const answerDetails = new AnswerDetails(time, true, answer, score);\n        this.questions[this.currentQuestionNum].setAnswerDetails(answerDetails);\n        this.loadNextQuestion();\n    }\n\n    skip() {\n        const score = 0;\n        const time = this.questionTimer.getMilisecondsFromStart();\n        const answerDetails = new AnswerDetails(time, false, "", score);\n        this.questions[this.currentQuestionNum].setAnswerDetails(answerDetails);\n        this.loadNextQuestion();\n    }\n\n    calculateScore(answer, correctAnswer, time) {\n        let score = 0;\n        if(answer === correctAnswer) {\n            score += 1;\n            if(time < bonusTime) score += 0.5;\n        } else score -= 0.25;\n        \n        return score;\n    }\n}\n;// CONCATENATED MODULE: ./quizGame.js\n\n\nconst quizGame_playButton = document.getElementById("playButton");\nconst answerButton = document.getElementById("answerButton");\nconst skipButton = document.getElementById("skipButton");\nconst quizGame_timerDiv = document.getElementById("timer");\n\nvar game = new Game();\ngame.startGame();\n\nquizGame_playButton.addEventListener("click", event => game.submitProperties());\nanswerButton.addEventListener("click", event => game.answer());\nskipButton.addEventListener("click", event => game.skip());\n\nvar questionTimer = setInterval(quizGame_timer, 1000);\nvar sec = 0;\nfunction quizGame_timer() {\n    let minutes = Math.floor(sec/60);\n    quizGame_timerDiv.innerHTML = minutes + ":" + sec%60;\n    sec ++;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///199\n')})();