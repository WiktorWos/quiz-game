(()=>{"use strict";eval('\n;// CONCATENATED MODULE: ./model/answerDetails.js\nclass AnswerDetails {\n    constructor(answerTime, isAnswered, answer, score) {\n        this.answerTime = answerTime;\n        this.isAnswered = isAnswered;\n        this.answer = answer;\n        this.score = score;\n    }\n}\n;// CONCATENATED MODULE: ./service/questionsFetcher.js\nclass QuestionsFetcher {\n    async fetchQuestions(questionsNum, category, difficulty) {\n        const apiURL = `https://opentdb.com/api.php?amount=${questionsNum}&category=${category}&difficulty=${difficulty}&type=multiple`;\n        return fetch(apiURL)\n            .then(response => response.json()) \n            .then(data=>{\n                return data.results;\n            })\n            .catch(error => alert(error));\n    }\n}\n;// CONCATENATED MODULE: ./model/question.js\nclass Question {\n    constructor(responseObj) {\n        this.category = responseObj.category;\n        this.type = responseObj.type;\n        this.difficulty = responseObj.difficulty;\n        this.question = responseObj.question;\n        this.correctAnswer = responseObj.correct_answer;\n        this.incorrectAnswers = responseObj.incorrect_answers;\n        this.answerDetails = {};\n    }\n\n    setAnswerDetails(answerDetails) {\n        this.answerDetails = answerDetails;\n    }\n}\n;// CONCATENATED MODULE: ./service/categoriesFetcher.js\nclass CategoriesFetcher {\n    async fetchCategories() {\n        const apiURL = "https://opentdb.com/api_category.php";\n        return fetch(apiURL)\n            .then(response => response.json()) \n            .then(data=>{\n                return data.trivia_categories;\n            })\n            .catch(error => alert(error));\n    }\n}\n;// CONCATENATED MODULE: ./ui/userInterface.js\n\n\nconst categories = document.getElementById("category");\nconst questionsNum = document.getElementById("quantity");\nconst properties = document.getElementById("properties");\nconst progressBar = document.getElementById("progressBar");\nconst questionsDiv = document.getElementById("questions");\nconst questionDiv = document.getElementById("question");\nconst summaryDiv = document.getElementById("summary");\nconst summaryAnswersDiv = document.getElementById("answersSummary");\nconst questionForm = document.forms["questionForm"];\nconst timerDiv = document.getElementById("timer");\n\nclass UserInterface {\n    constructor() {\n        this.categoriesFetcher = new CategoriesFetcher();\n        this.timerSec = 1;\n    }\n\n    async populateCategories() {\n        await this.categoriesFetcher.fetchCategories()\n            .then(response => {response.forEach(obj => {\n                let option = document.createElement("option");\n                option.text = obj.name;\n                option.value = obj.id;\n                categories.add(option);\n            });\n        });\n    }\n\n    async populateQuestionNums() {\n        for(let i=5; i<26; i++) {\n            let option = document.createElement("option");\n            option.text = i;\n            option.value = i;\n            questionsNum.add(option);\n        }\n    }\n\n    async preparePropertiesScreen() {\n        properties.classList.remove("hide");\n        summaryDiv.classList.add("hide");\n        summaryAnswersDiv.classList.add("hide");\n        summaryAnswersDiv.innerHTML = "";\n    }\n\n    async prepareQuestionScreen() {\n        properties.classList.add("hide");\n        progressBar.classList.remove("hide");\n        questions.classList.remove("hide");\n    }\n\n    async prepareQuestionsScreenWhenReplay() {\n        summaryDiv.classList.add("hide");\n        summaryAnswersDiv.classList.add("hide");\n        summaryAnswersDiv.innerHTML = "";\n    }\n\n    async prepareSummaryScreen(questions, gameDetails) {\n        progressBar.classList.add("hide");\n        questionsDiv.classList.add("hide");\n        summaryDiv.classList.remove("hide");\n        summaryAnswersDiv.classList.remove("hide");\n        this.createAnswersSummary(questions);\n        this.displayGameDetails(gameDetails);\n    }\n\n    async showQuestion(question, questionNum, currentQuestionNum) {\n        questionDiv.innerHTML = question.question;\n        let allAnswers = this.getAllAnswers(question);\n        questionForm.innerHTML = "";\n        this.createAnswers(allAnswers);\n        this.increseProgressBar(questionNum, currentQuestionNum)\n    }\n\n    increseProgressBar(questionNum, currentQuestionNum) {\n        const progressValue = document.getElementById("progressValue");\n        const calculatedWidth = (currentQuestionNum / questionNum) * 100;\n        const widthValue = calculatedWidth + "%";\n        progressValue.style.width = widthValue;\n    }\n\n    shuffleArray(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n\n    createRadioBox(answer, id) {\n        let radiobox = document.createElement(\'input\');\n        radiobox.id = id;\n        radiobox.type = \'radio\';\n        radiobox.value = answer;\n        radiobox.name = "answer"\n        return radiobox;\n    }\n\n    createLabel(answer, id) {\n        const label = document.createElement(\'label\')\n        label.htmlFor = id;\n        const description = document.createTextNode(answer);\n        label.appendChild(description);\n        return label;\n    }\n\n    createAnswerGroup(radiobox, label) {\n        const answerGroup = document.createElement("div");\n        answerGroup.classList.add("answerGroup");\n        \n        answerGroup.appendChild(radiobox);\n        answerGroup.appendChild(label);\n        return answerGroup;\n    }\n\n    getAllAnswers(question) {\n        const allAnswers = question.incorrectAnswers;\n        allAnswers.push(question.correctAnswer);\n        this.shuffleArray(allAnswers);\n        return allAnswers;\n    }\n\n    createAnswers(allAnswers) {\n        let radioboxId = 0;\n        allAnswers.forEach(answer => {\n            const radiobox = this.createRadioBox(answer, radioboxId);\n            const label = this.createLabel(answer, radioboxId);\n            const answerGroup = this.createAnswerGroup(radiobox, label);\n            questionForm.appendChild(answerGroup);\n            radioboxId++;\n        });\n    }\n\n    getSelectedRadioValue() {\n        let selectedAnswer = "";\n        questionForm["answer"].forEach(answer => {\n            if(answer.checked) selectedAnswer = answer.value;\n        });\n        if(selectedAnswer === "") alert("Please select an answer or skip the question.")\n        return selectedAnswer;\n    }\n\n    displayGameDetails(gameDetails) {\n        const totalScore = document.getElementById("totalScore");\n        const totalTime = document.getElementById("totalTime");\n        const timeInMilis = gameDetails.totalTimer.getMilisecondsFromStart();\n        const timeInsSec = Math.floor(timeInMilis/1000);\n        totalScore.innerHTML = gameDetails.totalScore;\n        totalTime.innerHTML = `${Math.floor(timeInsSec/60)}:${timeInsSec%60}`;\n    }\n\n    createAnswersSummary(questions) {\n        questions.forEach(question => {\n            const scoreSectionScore = this.createScoreSection("Score:", question.answerDetails.score);\n            const answerTime = question.answerDetails.answerTime;\n            const scoreSectionTime = this.createScoreSection("Time:", `${Math.floor(answerTime/1000)}s`);\n            const summaryInfo = this.createSummaryInfo(scoreSectionScore, scoreSectionTime);\n            const answerDetails = this.createAnswerDetails(summaryInfo, question);\n            summaryAnswersDiv.appendChild(answerDetails);\n        });\n        \n    }\n\n    createAnswerDetails(summaryInfo, question) {\n        const answerDetails = this.getDiv("summaryDiv", "");\n        answerDetails.appendChild(this.getDiv("question", question.question));\n        answerDetails.appendChild(this.getHr());\n        answerDetails.appendChild(this.getDiv("question", "Your answer: " + question.answerDetails.answer));\n        answerDetails.appendChild(this.getHr());\n        answerDetails.appendChild(this.getDiv("question", "Correct answer: " + question.correctAnswer));\n        answerDetails.appendChild(this.getHr());\n        answerDetails.appendChild(summaryInfo);\n        return answerDetails;\n    }\n\n    createSummaryInfo(sectionScore, sectionTime) {\n        const summaryInfo = this.getDiv("summaryInfoDiv", "");\n        summaryInfo.appendChild(sectionScore);\n        summaryInfo.appendChild(sectionTime);\n        return summaryInfo;\n    }\n\n    createScoreSection(labelName, value) {\n        const label = this.getLabel(labelName);\n        const valueDiv = this.getDiv("answerScore", value);\n        const scoreSection = this.getDiv("scoreSection", "");\n        scoreSection.appendChild(label);\n        scoreSection.appendChild(valueDiv);\n        return scoreSection;\n    }\n\n    getHr() {\n        return document.createElement("hr");\n    }\n\n    getDiv(className, innerHTML) {\n        const div = document.createElement("div");\n        div.classList.add(className);\n        div.innerHTML = innerHTML;\n        return div;\n    }\n\n    getLabel(innerHTML) {\n        const label = document.createElement("label");\n        label.innerHTML = innerHTML;\n        return label;\n    }\n\n    startQuestionTimer() {\n        const minutes = Math.floor(this.timerSec/60);\n        timerDiv.innerHTML = minutes + ":" + this.timerSec%60;\n        this.timerSec ++;\n    }\n}\n;// CONCATENATED MODULE: ./game/timer.js\nclass Timer {\n    constructor() {\n        this.start = new Date();\n    }\n\n    getMilisecondsFromStart() {\n        let stop = new Date();\n        return stop.getTime() - this.start.getTime();\n    }\n}\n;// CONCATENATED MODULE: ./model/gameDetails.js\n\n\nclass GameDetails {\n    constructor() {\n        this.totalTimer = new Timer();\n        this.totalScore = 0;\n    }\n}\n;// CONCATENATED MODULE: ./game/game.js\n\n\n\n\n\n\n\nconst propertiesForm = document.forms["propertiesForm"];\nconst bonusTime = 5000;\n\nclass Game {\n    constructor() {\n        this.questions = [];\n        this.currentQuestionNum = -1;\n        this.userInterface = new UserInterface();\n        this.questionFetcher = new QuestionsFetcher();\n        this.questionTimer = {};\n        this.gameDetails = {};\n    }\n\n    async startGame() {\n        this.userInterface.populateCategories();\n        this.userInterface.populateQuestionNums();\n    }\n\n    async playAgain() {\n        this.prepareToNewGame();\n        this.submitProperties();\n        this.userInterface.prepareQuestionsScreenWhenReplay();\n    }\n\n    async startNewGame() {\n        this.prepareToNewGame();\n        this.userInterface.preparePropertiesScreen();\n    }\n\n    prepareToNewGame() {\n        this.questions = [];\n        this.currentQuestionNum = -1;\n    }\n        \n    async submitProperties() {\n        this.gameDetails = new GameDetails();\n        const questionsNum = propertiesForm["quantity"].value;\n        const category = propertiesForm["category"].value;\n        const difficulty = propertiesForm["difficulty"].value;\n        await this.saveQuestions(questionsNum, category, difficulty);\n        this.userInterface.prepareQuestionScreen();\n        this.loadNextQuestion();\n    }\n\n    async saveQuestions(questionsNum, category, difficulty) {\n        await this.questionFetcher.fetchQuestions(questionsNum, category, difficulty)\n            .then(response => {\n                response.forEach(obj => {\n                    this.questions.push(new Question(obj));\n            });\n        });\n    }\n\n    loadNextQuestion() {\n        if(this.currentQuestionNum < this.questions.length) {\n            this.currentQuestionNum ++;\n            this.userInterface.showQuestion(this.questions[this.currentQuestionNum], this.questions.length, this.currentQuestionNum);\n            this.startTimer();\n            this.prepareVisibleTimer();\n        }\n    }\n\n    prepareVisibleTimer() {\n        this.userInterface.timerSec = 1;\n        const timerDiv = document.getElementById("timer");\n        timerDiv.innerHTML = "0:0";\n    }\n\n    startTimer() {\n        this.questionTimer = new Timer();\n        return timer;\n    }\n\n    startVisibleTimer() {\n        this.userInterface.startQuestionTimer();\n    }\n\n    answer(isAnswered) {\n        const answer = this.getAnswer(isAnswered);\n        const isAnswerNotChecked = (isAnswered && answer =="");\n        if(!isAnswerNotChecked) {\n            this.setAnswerDetails(isAnswered, answer);\n            this.setTotalScore();\n            this.loadNextScreen();\n        }\n    }\n\n    setAnswerDetails(isAnswered, answer) {\n        const time = this.questionTimer.getMilisecondsFromStart();\n        const correctAnswer = this.questions[this.currentQuestionNum].correctAnswer;\n        let score = this.getScore(isAnswered, answer, correctAnswer, time);\n        const answerDetails = new AnswerDetails(time, isAnswered, answer, score);\n        this.questions[this.currentQuestionNum].setAnswerDetails(answerDetails);\n    }\n\n    getAnswer(isAnswered) {\n        let answer = "";\n        if(isAnswered) answer = this.userInterface.getSelectedRadioValue();\n        return answer;\n    }\n\n    getScore(isAnswered, answer, correctAnswer, time) {\n        let score = 0;\n        if(isAnswered) score = this.calculateScore(answer, correctAnswer, time);\n        return score;\n    }\n\n    setTotalScore() {\n        const currentQuestion = this.questions[this.currentQuestionNum];\n        const currentQuestionScore = currentQuestion.answerDetails.score;\n        this.gameDetails.totalScore += currentQuestionScore;\n    }\n\n    loadNextScreen() {\n        const lastQuestionNum = this.questions.length - 1;\n        if(this.currentQuestionNum < lastQuestionNum) this.loadNextQuestion();\n        else {\n            this.userInterface.prepareSummaryScreen(this.questions, this.gameDetails);\n        }\n    }\n\n    calculateScore(answer, correctAnswer, time) {\n        let score = 0;\n        if(answer === correctAnswer) {\n            score += 1;\n            if(time < bonusTime) score += 0.5;\n        } else score -= 0.25;\n        \n        return score;\n    }\n}\n;// CONCATENATED MODULE: ./quizGame.js\n\n\nconst playButton = document.getElementById("playButton");\nconst answerButton = document.getElementById("answerButton");\nconst skipButton = document.getElementById("skipButton");\nconst playAgainButton = document.getElementById("playAgainButton");\nconst newGameButton = document.getElementById("newGameButton");\nconst quizGame_timerDiv = document.getElementById("timer");\n\nfunction startGame() {\n    const game = new Game();\n    game.startGame();\n    playButton.addEventListener("click", () => game.submitProperties());\n    answerButton.addEventListener("click", () => game.answer(true));\n    skipButton.addEventListener("click", () => game.answer(false));\n    playAgainButton.addEventListener("click", () => game.playAgain());\n    newGameButton.addEventListener("click", () => game.startNewGame());\n    const questionTimer = setInterval(() => game.startVisibleTimer(), 1000);\n}\n\nstartGame();\n\n\n\n// var questionTimer = setInterval(timer, 1000);\n// var sec = 0;\n// function timer() {\n//     let minutes = Math.floor(sec/60);\n//     timerDiv.innerHTML = minutes + ":" + sec%60;\n//     sec ++;\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///122\n')})();